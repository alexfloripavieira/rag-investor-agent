#!/usr/bin/env python3
"""
Script para testar automaticamente a integra√ß√£o RAG
"""
import os
from dotenv import load_dotenv
from vector_store import VectorStoreManager
import llm_services

# Carregar vari√°veis de ambiente
load_dotenv()

def test_rag_integration():
    """Testa automaticamente a integra√ß√£o RAG."""
    print("üß™ TESTE AUTOM√ÅTICO DE INTEGRA√á√ÉO RAG")
    print("=" * 60)
    
    # Verificar se OpenAI API key est√° configurada
    if not os.getenv("OPENAI_API_KEY"):
        print("‚ùå OPENAI_API_KEY n√£o configurada!")
        return
    print("‚úÖ OpenAI API Key configurada")
    
    # Inicializar vector store
    print("\n1. Inicializando Vector Store...")
    vector_manager = VectorStoreManager()
    doc_count = vector_manager.count_documents()
    
    if doc_count == 0:
        print("‚ö†Ô∏è Nenhum documento no vector store.")
        print("üí° Execute primeiro: Processe alguns relat√≥rios via interface web")
        return
    
    print(f"üìä Vector Store com {doc_count} chunks prontos")
    
    # Obter retriever e agente
    retriever = vector_manager.get_retriever(k=3)
    agent = llm_services.setup_agent(retriever)
    
    # Testes automatizados
    test_questions = [
        # Testes de recupera√ß√£o b√°sica
        {
            "categoria": "RECUPERA√á√ÉO B√ÅSICA",
            "pergunta": "Quais s√£o os c√≥digos dos FIIs mencionados nos relat√≥rios?",
            "espera_conteudo": True,
            "palavras_chave": ["FII", "c√≥digo", "11"]  # C√≥digos de FII terminam em 11
        },
        {
            "categoria": "RECUPERA√á√ÉO B√ÅSICA", 
            "pergunta": "Quais valores de dividend yield s√£o mencionados?",
            "espera_conteudo": True,
            "palavras_chave": ["yield", "%", "dividend"]
        },
        
        # Testes de an√°lise contextual
        {
            "categoria": "AN√ÅLISE CONTEXTUAL",
            "pergunta": "Quais s√£o as principais recomenda√ß√µes dos relat√≥rios?",
            "espera_conteudo": True,
            "palavras_chave": ["recomend", "invest", "suger"]
        },
        
        # Testes de controle negativo
        {
            "categoria": "CONTROLE NEGATIVO",
            "pergunta": "Qual √© o pre√ßo atual das a√ß√µes da Petrobras?",
            "espera_conteudo": False,
            "palavras_chave": ["relat√≥rios", "n√£o", "informa√ß√£o"]
        },
        {
            "categoria": "CONTROLE NEGATIVO",
            "pergunta": "Como est√° o clima hoje?",
            "espera_conteudo": False,
            "palavras_chave": ["n√£o", "clima", "relat√≥rios"]
        },
        
        # Teste de precis√£o
        {
            "categoria": "PRECIS√ÉO",
            "pergunta": "Cite uma frase espec√≠fica sobre riscos mencionada nos relat√≥rios",
            "espera_conteudo": True,
            "palavras_chave": ["risco", "\"", "'"]  # Espera cita√ß√µes
        }
    ]
    
    print("\n2. Executando testes automatizados...")
    results = {"passed": 0, "failed": 0, "total": len(test_questions)}
    
    for i, test in enumerate(test_questions, 1):
        print(f"\n--- TESTE {i}/{len(test_questions)}: {test['categoria']} ---")
        print(f"‚ùì Pergunta: {test['pergunta']}")
        
        try:
            # Fazer pergunta ao agente
            response = agent.invoke({"input": test['pergunta']})["output"]
            print(f"üí¨ Resposta: {response[:200]}...")
            
            # Verificar se a resposta √© adequada
            response_lower = response.lower()
            
            if test['espera_conteudo']:
                # Deve conter informa√ß√µes dos documentos
                has_keywords = any(keyword.lower() in response_lower for keyword in test['palavras_chave'])
                has_content = len(response) > 50  # Resposta substancial
                
                if has_keywords and has_content:
                    print("‚úÖ PASSOU - Resposta cont√©m informa√ß√µes relevantes")
                    results["passed"] += 1
                else:
                    print("‚ùå FALHOU - Resposta muito gen√©rica ou sem conte√∫do dos documentos")
                    results["failed"] += 1
            else:
                # N√£o deve inventar informa√ß√µes
                indicates_limitation = any(keyword.lower() in response_lower for keyword in test['palavras_chave'])
                
                if indicates_limitation:
                    print("‚úÖ PASSOU - Reconheceu limita√ß√£o corretamente")
                    results["passed"] += 1
                else:
                    print("‚ùå FALHOU - Pode ter inventado informa√ß√µes")
                    results["failed"] += 1
                    
        except Exception as e:
            print(f"‚ùå ERRO no teste: {e}")
            results["failed"] += 1
    
    # Teste espec√≠fico de recupera√ß√£o
    print("\n3. Teste de recupera√ß√£o direta...")
    try:
        test_docs = retriever.invoke("FII investimento dividend yield")
        print(f"üìÑ Recuperados: {len(test_docs)} documentos relevantes")
        
        if test_docs:
            print("‚úÖ Retriever funcionando corretamente")
            print(f"üìã Exemplo de conte√∫do: {test_docs[0].page_content[:150]}...")
            
            # Verificar metadados
            if 'source_file' in test_docs[0].metadata:
                print(f"üìÅ Fonte: {test_docs[0].metadata['source_file']}")
                print("‚úÖ Metadados de fonte presentes")
            else:
                print("‚ö†Ô∏è Metadados de fonte ausentes")
        else:
            print("‚ùå Nenhum documento recuperado")
            
    except Exception as e:
        print(f"‚ùå Erro na recupera√ß√£o: {e}")
    
    # Resultados finais
    print("\n" + "=" * 60)
    print("üéØ RESULTADOS DOS TESTES")
    print(f"‚úÖ Passaram: {results['passed']}/{results['total']}")
    print(f"‚ùå Falharam: {results['failed']}/{results['total']}")
    success_rate = (results['passed'] / results['total']) * 100
    print(f"üìä Taxa de sucesso: {success_rate:.1f}%")
    
    if success_rate >= 80:
        print("üéâ RAG FUNCIONANDO CORRETAMENTE!")
    elif success_rate >= 60:
        print("‚ö†Ô∏è RAG funcionando parcialmente - verificar configura√ß√µes")
    else:
        print("üö® RAG COM PROBLEMAS - verificar implementa√ß√£o")
    
    print("\nüí° Recomenda√ß√µes:")
    print("   ‚Ä¢ Teste manualmente com as perguntas em perguntas_teste_rag.md")
    print("   ‚Ä¢ Compare diferentes modelos LLM (GPT-4o-mini vs GPT-4o)")
    print("   ‚Ä¢ Verifique se os documentos foram processados corretamente")
    print("   ‚Ä¢ Ajuste o par√¢metro k do retriever se necess√°rio")

if __name__ == "__main__":
    test_rag_integration()